過程 (版本控制)
這裡詳細描述了從一開始的想法到最終實作的各個版本的變化過程，以符合版本控制的需求。

版本 1: 初步想法與 CRISP-DM 概要
目標: 根據 CRISP-DM 架構一個線性回歸模型，並實現參數 a、b、c 可動態調整。
過程:
業務理解：我們要實現的應用允許使用者即時調整模型參數並觀察回歸線變化。
數據理解：根據公式 
𝑦=𝑎∗𝑥+𝑏+𝑐∗𝑁(0,variance)y=a∗x+b+c∗N(0,variance) 隨機生成數據。
數據準備：透過 linear_regression_data.py 文件生成數據並擬合回歸線。
模型構建：在 app.py 中使用 Dash 框架呈現回歸線。
版本 2: 初步實作結構
目標: 分離數據生成與回歸邏輯，使代碼模組化，並使用 Dash 框架創建交互式網頁應用。
過程:
在 linear_regression_data.py 中生成數據與擬合回歸線:
generate_data(a, b, c, variance) 函數負責生成 n 個隨機數據點。
fit_regression_line(x, y) 函數進行線性回歸擬合並返回回歸線公式。
在 app.py 中負責網頁展示與回調函數:
使用 Dash 創建滑桿 (Sliders) 調整 a、b、c 參數。
使用回調函數更新圖形，顯示數據點與回歸線。
版本 3: 動態即時更新圖形
目標: 讓滑桿在滑動時就即時更新圖形，而不是等到放開後才更新。
過程:
調整滑桿的 updatemode 屬性為 drag，確保在滑動時即時更新參數與圖形。
更新 callback 函數以實現參數動態調整後即時反映在回歸線上。
版本 4: 將回歸線方程式顯示為 y = ax + b
目標: 確保擬合的回歸線以 y = ax + b 形式顯示在圖例中。
過程:
修改 linear_regression_data.py 中的 fit_regression_line 函數，將擬合的回歸方程式格式化為 y = ax + b 的形式，並返回這個方程式作為圖例標籤。
版本 5: 確保應用完全模組化
目標: 將數據處理和展示邏輯完全分離，確保 app.py 只負責網頁展示，linear_regression_data.py 處理數據邏輯。
過程:
確保 app.py 只負責調用 linear_regression_data.py 中的函數來生成數據、擬合回歸線，並在 Dash 中顯示結果。

